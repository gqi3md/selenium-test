/*
 * This source file was generated by the Gradle 'init' task
 */
package app;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import java.net.MalformedURLException;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebElement;

import app.util.Conditions;
import app.util.WaitInterval;

@SuppressWarnings("deprecation") //getDomProperty is not supported by the chrome driver.?
class LoginTest extends PageTest{

	protected LoginPage loginPage;

	public LoginTest() {
		super();
	}

	@BeforeEach
	public void open() {
		try {
			this.loginPage = new LoginPage();
		} catch (MalformedURLException e) {
			fail("Website could not be reached");
		}
		this.driver = loginPage.getDriver();
		copyWaits(loginPage);
	}

	@AfterEach
	public void close() {
		if(driver != null) {
			driver.quit();
		}
	}

	@Test
	public void testCorrectLogin() {
		waitAndReturnElement(By.id("headingText"), WaitInterval.LONG);

		if(driver.findElements(By.id("identifierId")).size() > 0) {
			WebElement usernameField = waitAndReturnElement(By.id("identifierId"));
			usernameField.sendKeys(LoginPage.correctUsername);
			assertEquals(LoginPage.correctUsername, usernameField.getAttribute("value"), "The username value does not match the typed value!");
		} else {
			try {
				waitAndReturnElement(By.xpath(".//div[starts-with(@data-identifier,\"" + LoginPage.correctUsername + "\")]")).click();
			} catch (TimeoutException e) {
				fail("The selectable username is missing");
			}
		}

		try {
			waitAndReturnElement(By.xpath(".//*[@id=\"identifierNext\"]//button[@type=\"button\"]")).click();
		} catch (TimeoutException e) {
			fail("The next button is missing");
		}

		longWait.until(Conditions.urlContains("/signin/challenge"));
		try {
			WebElement passwordField = waitAndReturnElement(By.xpath(".//*[@id=\"password\"]//input[@type=\"password\"]"));
			passwordField.sendKeys(LoginPasswordPage.correctPassword);
			assertEquals(LoginPasswordPage.correctPassword, passwordField.getAttribute("value"), "The password value does not match the typed value!");
		} catch (TimeoutException e) {
			fail("The password field is missing");
		}

		try {
			WebElement nextButton = waitAndReturnElement(By.xpath(".//*[@id=\"passwordNext\"]"));
			nextButton.click();
		} catch (TimeoutException e) {
			fail("The next button is missing");
		}

		longWait.until(Conditions.urlContains("https://myaccount.google.com"));
	}

	@Override
	protected BasePage getPage() {
		return loginPage;
	}
}
